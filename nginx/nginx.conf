# Define los servidores "upstream" que son nuestras aplicaciones Flask.
# 'app1' y 'app2' deben ser los nombres de los servicios que crear치s en Railway.
# El puerto :8000 es el que expusimos en el Dockerfile de Flask.
upstream app1_server {
    server app1:8000;
}

upstream app2_server {
    server app2:8000;
}

server {
    # Nginx escuchar치 en el puerto 80. Railway expondr치 este puerto al mundo.
    listen 80;

    # Regla para la primera instancia
    location /instancia1/ {
        # Reescribe la URL para quitar /instancia1/ antes de pasarla a Flask.
        # Ejemplo: /instancia1/api/status se convierte en /api/status.
        rewrite /instancia1/(.*) /$1 break;
        
        proxy_pass http://app1_server;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Regla para la segunda instancia
    location /instancia2/ {
        rewrite /instancia2/(.*) /$1 break;
        
        proxy_pass http://app2_server;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # P치gina de bienvenida por defecto
    location / {
        return 200 'Proxy activo. Accede a /instancia1/ o /instancia2/.';
        add_header Content-Type text/plain;
    }
}